version: 0.2
env:
  git-credential-helper: "yes" # 자동으로 커밋
  variables:
    # docker 파라미터 정의
    ECS_CONTAINER_NAME: ecs-streamlit-container
    IMAGE_REPO_NAME: ecs-streamlit-ecr # aws ecr에 등록이 되어 있는 name
    IMAGE_TAG: latest
    AWS_DEFAULT_REGION: ap-northeast-2

phases:
  pre_build:
    commands:
      # Docker push를 할 ECR에 로그인 필요
      # https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecr/get-login-password.html
      # https://stackoverflow.com/questions/77488134/codebuild-error-exit-status-127-file-name-too-long
      - echo Logging in to Amazon ECR...
      - aws --version
      - ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_DEFAULT_REGION)
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output
        text)
      - echo -n ${ECR_PASSWORD} | docker login --username AWS --password-stdin
        ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  build:
    commands:
      - echo Build started on `date`
      # 프로젝트 폴더로 이동
      - cd course_aws-main/codepipeline/ecs-streamlit
      - pwd
      - echo Building the Docker image...
      # Github Repository에 있는 Dockerfile의 위치에 맞춰 수정
      - docker build -f ./Dockerfile -t $IMAGE_REPO_NAME:$IMAGE_TAG . # 빌드 컴퓨터에 이미지를 생성
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI

  post_build: # 도커 푸시작업 (서버에 올림)
    commands:
      - echo package Source...
      - echo push the Docker image...
      - docker push $REPOSITORY_URI

      # Give your container name
      - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_CONTAINER_NAME
        $REPOSITORY_URI > ../../imagedefinitions.json
      - echo $ECS_CONTAINER_NAME
      - echo printing ../../imagedefinitions.json
      - cat ../../imagedefinitions.json

artifacts: # build 에서 Deploy에 전달하는 메세지 데이터(json). (아키텍처 참고)
  files:
    - imagedefinitions.json
